id = 'core'

sampler:
	id = 'rendering.sampler.point'
	filter: 'MinPoint', 'MagPoint'
	addressMode = 'Clamp'
	
sampler:
	id = 'rendering.sampler.linear'
	filter: 'MinLinear', 'MagLinear'
	addressMode = 'Clamp'
	
sampler:
	id = 'rendering.sampler.mipLinear'
	filter: 'MinLinear', 'MagLinear', 'MipLinear'
	addressMode = 'Clamp'
	
sampler:
	id = 'rendering.sampler.repeatLinear'
	filter: 'MinLinear', 'MagLinear'
	addressMode = 'Repeat'

shaderLibrary:
	id = 'shaders.glslCompability'
	path = 'shaderlib/glslCompability.glsl'
	
shaderLibrary:
	id = 'shaders.constants'
	path = 'shaderlib/constants.h'
	
shaderLibrary:
	id = 'shaders.lighting.types'
	path = 'shaderlib/lighting/types.glsl'

shaderLibrary:
	id = 'shaders.lighting.tiled'
	path = 'shaderlib/lighting/tiled.glsl'

shaderLibrary:
	id = 'shaders.lighting.phong'
	path = 'shaderlib/lighting/phong.glsl'
	
shaderLibrary:
	id = 'shaders.lighting.orenNayar'
	path = 'shaderlib/lighting/orenNayer.glsl'
	
shaderLibrary:
	id = 'shaders.visualizeHeat'
	path = 'shaderlib/visualizeHeat.glsl'
	
shaderLibrary:
	id = 'shaders.quaternion'
	path = 'shaderlib/quaternion.glsl'
	
shaderLibrary:
	id = 'shaders.entity'
	path = 'shaderlib/entity/entity.glsl'
	
shaderLibrary:
	id = 'shaders.entity.constantBuffer'
	path = 'shaderlib/entity/constantBuffer.glsl'
	
shaderLibrary:
	id = 'shaders.view'
	path = 'shaderlib/view/view.glsl'
	
shaderLibrary:
	id = 'shaders.view.constantBuffer'
	path = 'shaderlib/view/constantBuffer.glsl'
	
shaderLibrary:
	id = 'shaders.vertexInput.mesh.static'
	path = 'shaderlib/vertexInput/staticMesh.glsl'
	
shaderLibrary:
	id = 'shaders.vertexInput.mesh.skinned'
	path = 'shaderlib/vertexInput/skinnedMesh.glsl'
	
shaderLibrary:
	id = 'shaders.depth.unchanged'
	path = 'shaderlib/depth/unchanged.glsl'

pipeline:
	id = 'rendering.debug.pipeline'
	glsl.vertexAttributes: 'position', 'colour'
	vertexShader:
		#require core.shaders.glslCompability
		ATTRIBUTE_IN vec3 position; ATTRIBUTE_IN vec4 colour;
		uniform highp mat4 mvp;
		VARYING_OUT lowp vec4 vsColour;
		void main() {
			gl_Position = mvp*vec4(position,1); vsColour = colour;
		}
	pixelShader:
		#require core.shaders.glslCompability
		VARYING_IN lowp vec4 vsColour;
		DEF_PIXEL_SHADER_OUT;
		void main() { PIXEL_SHADER_OUT = vsColour; }
		

pipeline:
	id = 'rendering.visualize.depthBuffer.pipeline'
	glsl.vertexAttributes: 'position','texcoord','colour'
	vertexShader:
		#require core.shaders.glslCompability
		ATTRIBUTE_IN vec2 position; ATTRIBUTE_IN vec2 texcoord; ATTRIBUTE_IN vec4 colour;
		VARYING_OUT mediump vec2 vsTexcoord;VARYING_OUT lowp vec4 vsColour;
		uniform highp mat4 matrix;
		void main() { 
			gl_Position = matrix*vec4(position,0,1);
			vsTexcoord = vec2(texcoord.x,1.0-texcoord.y); vsColour = colour;
		}
	pixelShader:
		#require core.shaders.glslCompability
		VARYING_IN mediump vec2 vsTexcoord; VARYING_IN lowp vec4 vsColour;
		DEF_PIXEL_SHADER_OUT;
		uniform sampler2D textures;
		void main() {
			mediump float z = texture2D(textures,vsTexcoord).r;
			mediump float v = (z+1.0f)*0.5;
			PIXEL_SHADER_OUT = vec4(v,v,v,z<1.0? 1.0 : 0.0)* vsColour;
		}
	

pipeline:
	id = 'rendering.visualize.lightTiles.pipeline'
	glsl.vertexAttributes: 'position','texcoord','colour'
	vertexShader:
		#require core.shaders.glslCompability
		ATTRIBUTE_IN vec2 position; ATTRIBUTE_IN vec2 texcoord; ATTRIBUTE_IN vec4 colour;
		VARYING_OUT mediump vec2 vsTexcoord;VARYING_OUT lowp vec4 vsColour;
		uniform highp mat4 matrix;
		void main() { 
			gl_Position = matrix*vec4(position,0,1);
			vsTexcoord = vec2(texcoord.x,1.0-texcoord.y); vsColour = colour;
		}
	pixelShader:
		#require core.shaders.glslCompability
		#require core.shaders.visualizeHeat
		#require core.shaders.lighting.tiled
		VARYING_IN mediump vec2 vsTexcoord; VARYING_IN lowp vec4 vsColour;
		uniform usamplerBuffer textures;
		DEF_PIXEL_SHADER_OUT;
		
		void main() {
			float invTileSize = 1.0/32.0;
			mediump vec2 pos = gl_FragCoord.xy * vec2(invTileSize);
			float xx = mod(pos.x,1.0);
			float yy = mod(pos.y,1.0);
			bool border = xx <= invTileSize || yy <= invTileSize;
			uvec2 tile = lightingTiledGetTile(textures,invTileSize,40);
			float intensity = float(tile.y)/100.0;
			PIXEL_SHADER_OUT = (border? vec4(0.0,0.0,0.0,1.0) : vec4(visualizeHeat(intensity),1.0)) * vsColour;
		}
	

pipeline:
	id = 'rendering.2d.textured.coloured.pipeline'
	glsl.vertexAttributes: 'position','texcoord','colour'
	vertexShader:
		#require core.shaders.glslCompability
		ATTRIBUTE_IN vec2 position; ATTRIBUTE_IN vec2 texcoord; ATTRIBUTE_IN vec4 colour;
		VARYING_OUT mediump vec2 vsTexcoord;VARYING_OUT lowp vec4 vsColour;
		uniform highp mat4 matrix;
		void main() { 
			gl_Position = matrix*vec4(position,0,1);
			vsTexcoord = texcoord; vsColour = colour;
		}
	pixelShader:
		#require core.shaders.glslCompability
		VARYING_IN mediump vec2  vsTexcoord; VARYING_IN lowp vec4 vsColour;
		DEF_PIXEL_SHADER_OUT;
		uniform sampler2D textures;
		void main() {
			PIXEL_SHADER_OUT = texture2D(textures,vsTexcoord) * vsColour;
		}
	

pipeline:
	id = 'rendering.2d.coloured.pipeline'
	glsl.vertexAttributes: 'position','colour'
	vertexShader:
		#require core.shaders.glslCompability
		ATTRIBUTE_IN vec2 position; ATTRIBUTE_IN vec2 texcoord; ATTRIBUTE_IN vec4 colour;
		VARYING_OUT lowp vec4 vsColour;
		uniform highp mat4 matrix;
		void main() {
			gl_Position = matrix*vec4(position,0,1);
			vsColour = colour;
		}
	pixelShader:
		#require core.shaders.glslCompability
		VARYING_IN lowp vec4  vsColour;
		DEF_PIXEL_SHADER_OUT;
		void main() {
			PIXEL_SHADER_OUT = vsColour;
		}
	

pipeline:
	id = 'rendering.text.pipeline'
	glsl.vertexAttributes: 'position','texcoord','channelMask','colour'
	vertexShader:
		#require core.shaders.glslCompability
		ATTRIBUTE_IN vec2 position;ATTRIBUTE_IN vec2 texcoord;ATTRIBUTE_IN vec4 channelMask; ATTRIBUTE_IN vec4 colour;
		VARYING_OUT mediump vec2 vsTexcoord;VARYING_OUT lowp vec4 vsChannelMask;VARYING_OUT lowp vec4 vsColour;
		uniform highp mat4 matrix;
		void main(){
			gl_Position = matrix*vec4(position,0,1);
			vsTexcoord = texcoord;vsChannelMask = channelMask;vsColour = colour;
		}
	pixelShader:
		#require core.shaders.glslCompability
		VARYING_IN mediump vec2 vsTexcoord;VARYING_IN lowp vec4 vsChannelMask;VARYING_IN lowp vec4 vsColour;
		uniform sampler2D textures;
		DEF_PIXEL_SHADER_OUT;
		void main(){
			lowp float value = dot(texture2D(textures,vsTexcoord),vsChannelMask);
			PIXEL_SHADER_OUT = vec4(vsColour.xyz,vsColour.w*value);
		}
	
	
pipeline:
	id = 'rendering.text.outlined.pipeline'
	glsl.vertexAttributes: 'position','texcoord','channelMask','colour','outlineColour'
	vertexShader:
		#require core.shaders.glslCompability
		ATTRIBUTE_IN vec2 position;ATTRIBUTE_IN vec2 texcoord;ATTRIBUTE_IN vec4 channelMask; ATTRIBUTE_IN vec4 colour; ATTRIBUTE_IN vec4 outlineColour;
		VARYING_OUT mediump vec2 vsTexcoord;VARYING_OUT lowp vec4 vsChannelMask;
		VARYING_OUT lowp vec4 vsBorderColour; VARYING_OUT lowp vec4 vsColour;
		uniform mat4 matrix;
		void main(){
			gl_Position = matrix*vec4(position,0,1);
			vsTexcoord = texcoord;vsChannelMask = channelMask;vsBorderColour = outlineColour; vsColour = colour;
		}
	pixelShader:
		#require core.shaders.glslCompability
		VARYING_IN mediump vec2 vsTexcoord;VARYING_IN lowp vec4 vsChannelMask;
		VARYING_IN lowp vec4 vsBorderColour;VARYING_IN lowp vec4 vsColour;
		uniform sampler2D textures;
		DEF_PIXEL_SHADER_OUT;
		void main(){
			lowp float value = dot(texture2D(textures,vsTexcoord),vsChannelMask);
			if(value > 0.69){
				 lowp float k = (2.0*value - 1.0);
				 PIXEL_SHADER_OUT = vec4(vsColour.xyz*k + vsBorderColour.xyz*(1.0-k),vsColour.a);
			}
			else PIXEL_SHADER_OUT = vec4(vsBorderColour.xyz,value*vsBorderColour.a);
		}
	

shaderLibrary:
	id = 'shaders.perlinNoise'
	path = 'shaderlib/perlinNoise.glsl'
	
shaderLibrary:
	id = 'shaders.rayBoxIntersection'
	path = 'shaderlib/rayBoxIntersection.glsl'
	
shaderLibrary:
	id = 'shaders.fog'
	path = 'shaderlib/fog.glsl'
