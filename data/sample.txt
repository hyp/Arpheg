id = 'sample'

pipeline:
	id = 'default'
	glsl.vertexAttributes: 'position', 'normal', 'texcoord', 'weights'
	vertexShader = 'shaders/vertexSkeletalAnimation.glsl'
	pixelShader  = 'shaders/shaderPixel.glsl'
	
pipeline:
	id = 'staticMeshPipeline'
	glsl.vertexAttributes: 'position', 'normal', 'texcoord'
	vertexShader = 'shaders/shaderVertex.glsl'
	pixelShader = 'shaders/shaderPixel.glsl'

pipeline:
	id = 'raymarch'
	glsl.vertexAttributes: 'position'
	vertexShader:
		in vec4 position;
		uniform mat4 mvp;uniform mat4 mv;
		out vec3 eyeOrigin;out vec3 eyeDirection;
		void main(){
			eyeOrigin = (inverse(mv)*vec4(0,0,0,1)).xyz;
			eyeDirection = position.xyz - eyeOrigin;
			gl_Position = mvp * vec4(position.xyz,1.0);
		}
		
	pixelShader:
		#require core.shaders.rayBoxIntersection
		#require core.shaders.perlinNoise
		
		in vec3 eyeOrigin; in vec3 eyeDirection;
		out vec4 fragment;
		
		float sdSphere( vec3 p, float s )
		{
		  return length(p)-s;
		}
		float turbulence( vec3 p ) {
			float w = 100.0;
			float t = -.5;
			for (float f = 1.0 ; f <= 4.0 ; f++ ){
				float power = pow( 2.0, f );
				t += abs( pnoise( vec3( power * p ), vec3( 4.0, 4.0, 4.0 ) ) / power );
			}
			return t;
		}
		uniform sampler2D flameTexture;
		uniform float currentTime;
		vec4 flame(vec3 P,float time) {
			P = P*1.0;
			// calculate radial distance in XZ plane
			vec2 uv;
			uv.x = length(P.xz);
			uv.y = - ( P.y + turbulence(P*0.25 + vec3(time*0.125)) * 2.0 );
			return texture2D(flameTexture, uv);
		}
		vec4 fireball(vec3 p, float time)
		{
			float d = length(p);
			d += turbulence(p*2.0 + vec3(time*0.25)).x * 1.25;
			vec4 c = texture2D(flameTexture, vec2(d*2.0,0.125));
			return c;
		}
		vec4 lookupDiffuse(vec3 p){
			vec2 offset;
			offset.x = float(int(p.y*64.0f)%4);
			offset.y = float(int(p.y*64.0f)/4);
			return texture2D(flameTexture,p.xz*(64.0/1024.0) + offset);
		}
		//vec2 To2DCoords(vec3 coords){
		//	float u = coords.x + 3DTextureSize.x*(coords.z - 2DTextureSize.x *floor(coords.z/2DTextureSize.x));
		//	float v = coords.y + 3DTextureSize.y*floor(coords.x/2DTextureSize.x);
		//	return vec2(u,v);
		//}
		vec4 raymarchBox(vec3 origin,vec3 direction){
			vec3 pos = origin;
			vec3 step = direction * 0.5;
			vec4 colour = vec4(0.0);
			
			for(int i = 0; i < 64;++i){
				colour = lookupDiffuse(pos);
				if(colour.a > 0.1) break;
				pos+=step;
			}
			return colour;
		}
 
		void main() {
			float tnear, tfar;
			vec3 eyeDir = normalize(eyeDirection);
			IntersectBox(eyeOrigin,eyeDir,vec3(-1.0,-1.0,-1.0),vec3(1.0,1.0,1.0),tnear,tfar);
			if (tnear < 0.0) tnear = 0.0;

			// calculate intersection points
			vec3 Pnear = eyeOrigin + eyeDir*tnear;
			vec3 Pfar = eyeOrigin + eyeDir*tfar;
			// convert to texture space
			Pnear = Pnear*0.5 + 0.5;
			Pfar = Pfar*0.5 + 0.5;
    
			// march along ray, accumulating color
			vec4 colour = vec4(0);
			//#define RAYMARCH_FRONT_TO_BACK
			#ifdef RAYMARCH_FRONT_TO_BACK
				vec3 P = Pnear;
				vec3 Pstep = eyeDir * 0.1f;
			#else
				vec3 P = Pfar;
				vec3 Pstep = -eyeDir * 0.1f;
			#endif

			for(int i=0; i<128; i++) {
				/*vec4 s = flame(P,currentTime);
				#ifdef RAYMARCH_FRONT_TO_BACK
					//s.rgb *= s.a;   // premultiply alpha
					//colour = (1 - colour.a)*s + colour;
					colour = mix(colour, s,s.a);
					// early exit if opaque
					if (colour.a > 0.7)
						break;
				#else
					colour = mix(colour, s,s.a);
				#endif*/
				//float4 s = tex3D(volumeTex, P);
				//float dist = sdSphere(P,1.0f);
				//if(dist < 0.0f) colour = vec3(1.0,1.0,1.0);

				P += Pstep;
			}
				
			fragment = colour;//vec4(eyeDir*0.5 + vec3(0.5,0.5,0.5),1.0);
		}

texture:
	id = 'flameTexture'
	path = 'flame.png'
	
font:
	id = 'font'
	path = 'fonts/lily64pxOutlined.fnt'
	
font:
	id = 'fonts.lily64px'
	path = 'fonts/lily64px.fnt'
	
texture:
	id = 'crate'
	path = 'meshes/crate.tga'
	
texture:
	id = 'ui.atlas'
	path = 'meshes/crate.tga'

sprite:
	id = 'icon'
	texture = 'ui.atlas'
	frame: 0,0, 1.0,1.0

mesh:
	id = 'head'
	path = 'meshes/idle.dae'
	boundingSphere: 0,1.5,0,2
	
mesh:
	id = 'foo'
	path = 'meshes/head.dae'

	

		


	

	
